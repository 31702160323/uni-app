// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineModel() basic usage 1`] = `
"export default {
  props: {
    "modelValue": { required: true },
    "count": {},
    "toString": { type: Function },
  },
  emits: ["update:modelValue", "update:count", "update:toString"],
  setup() {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const modelValue = useModel(__props, "modelValue")
      const c = useModel(__props, "count")
      const toString = useModel(__props, "toString")
      
return "INLINE_RENDER"
}

}"
`;

exports[`defineModel() w/ array props 1`] = `
"export default {
  props: /*#__PURE__*/mergeModels(['foo', 'bar'], {
    "count": {},
  }),
  emits: ["update:count"],
  setup() {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
      const count = useModel(__props, "count")
      
return "INLINE_RENDER"
}

}"
`;

exports[`defineModel() w/ defineProps and defineEmits 1`] = `
"export default {
  props: /*#__PURE__*/mergeModels({ foo: String }, {
    "modelValue": { default: 0 },
  }),
  emits: /*#__PURE__*/mergeModels(['change'], ["update:modelValue"]),
  setup() {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
      
      const count = useModel(__props, "modelValue")
      
return "INLINE_RENDER"
}

}"
`;

exports[`defineModel() w/ local flag 1`] = `
"const local = true
      
export default {
  props: {
    "modelValue": { local: true, default: 1 },
    "bar": { [key]: true },
    "hoist": { local },
  },
  emits: ["update:modelValue", "update:bar", "update:hoist"],
  setup() {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const foo = useModel(__props, "modelValue", { local: true })
      const bar = useModel(__props, "bar", { [key]: true })
      // const baz = defineModel('baz', { ...x })
      // const qux = defineModel('qux', x)

      // const foo2 = defineModel('foo2', { local: true, ...x })

      const hoist = useModel(__props, "hoist", { local })
      
return "INLINE_RENDER"
}

}"
`;

exports[`defineModel() w/ types, basic usage 1`] = `
"export default {
  props: {
    "modelValue": { type: [Boolean, String] },
    "count": { type: Number },
    "disabled": { type: Number, ...{ required: false } },
    "any": { type: Boolean, skipCheck: true },
  },
  emits: ["update:modelValue", "update:count", "update:disabled", "update:any"],
  setup() {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const modelValue = useModel(__props, "modelValue")
      const count = useModel(__props, "count")
      const disabled = useModel(__props, "disabled")
      const any = useModel(__props, "any")
      
return "INLINE_RENDER"
}

}"
`;

exports[`defineModel() w/ types, production mode 1`] = `
"export default {
  props: {
    "modelValue": { type: Boolean },
    "fn": {},
    "fnWithDefault": { type: Function, ...{ default: () => null } },
    "str": {},
    "optional": { required: false },
  },
  emits: ["update:modelValue", "update:fn", "update:fnWithDefault", "update:str", "update:optional"],
  setup() {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const modelValue = useModel(__props, "modelValue")
      const fn = useModel(__props, "fn")
      const fnWithDefault = useModel(__props, "fnWithDefault")
      const str = useModel(__props, "str")
      const optional = useModel(__props, "optional")
      
return "INLINE_RENDER"
}

}"
`;
