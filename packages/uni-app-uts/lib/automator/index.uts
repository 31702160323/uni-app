import {
  callUniMethod,
  CallUniMethodParams,
  captureScreenshot,
  CaptureScreenshotParams,
  getPageStack,
  getCurrentPage,
  GetCurrentPageParams
} from './apis/App/index.uts'
import {
  GetDataParams as PageGetDataParams,
  getData as pageGetData,
  SetDataParams as PageSetDataParams,
  setData as pageSetData,
  CallMethodParams,
  callMethod as pageCallMethod,
  GetElementParams as PageGetElementParams,
  getElement as pageGetElement,
  getElements as pageGetElements,
  GetWindowPropertiesParams,
  getWindowProperties,
} from './apis/Page.uts'
import { socketEmitter, SocketEmitterParams } from './apis/App/Socket.uts'
import {
  GetElementParams as ElementGetElementParams,
  getElement as elementGetElement,
  getElements as elementGetElements,
  GetDOMPropertiesParams,
  getDOMProperties,
  GetPropertiesParams,
  getProperties,
  CallFunctionParams as ElementCallFunctionParams,
  callFunction as elementCallFunction,
  TapParams,
  tap,
  CallMethodParams as ElementCallMethodParams,
  callMethod as elementCallMethod,
  GetDataParams as ElementGetDataParams,
  getData as elementGetData,
  SetDataParams as ElementSetDataParams,
  setData as elementSetData,
  GetOffsetParams,
  getOffset,
  LongpressParams,
  longpress,
  HandleTouchEventParams,
  handleTouchEvent,
  GetAttributesParams,
  getAttributes,
  GetStylesParams,
  getStyles,
} from './apis/Element.uts'

let socketTask: SocketTask | null = null
const wsEndpoint = process.env.UNI_AUTOMATOR_WS_ENDPOINT

export function send(data: any) {
  socketTask?.send({ data: JSON.stringify(data) } as SendSocketMessageOptions)
}

export type Callback = (result: any | null, error: any | null) => void

type Msg = {
  id: string,
  method: string,
  params: any
}

export function onMessage(msg: string) {
  const json = JSON.parse<Msg>(msg)!
  const method = json.method
  const params = JSON.stringify(json.params)
  const res = new Map<string, any | null>([['id', json.id]])
  try {
    const callback = (result?: any | null, error?: any | null) => {
      res.set('result', result)
      res.set('error', error)
      send(res)
    }
    if (method.startsWith('App.')) {
      switch (method) {
        case 'App.callUniMethod':
          callUniMethod(JSON.parse<CallUniMethodParams>(params)!, callback)
          break
        case 'App.captureScreenshot':
          captureScreenshot(JSON.parse<CaptureScreenshotParams>(params)!, callback)
          break
        case 'App.getPageStack':
          getPageStack(callback)
          break
        case 'App.getCurrentPage':
          getCurrentPage({ callback } as GetCurrentPageParams)
          break
        case 'App.socketEmitter':
          socketEmitter(JSON.parse<SocketEmitterParams>(params)!, callback)
          break
      }
    } else if (method.startsWith('Page.')) {
      switch (method) {
        case 'Page.getData':
          pageGetData(JSON.parse<PageGetDataParams>(params)!, callback)
          break
        case 'Page.setData':
          pageSetData(JSON.parse<PageSetDataParams>(params)!, callback)
          break
        case 'Page.callMethod':
          pageCallMethod(JSON.parse<CallMethodParams>(params)!, callback)
          break
        case 'Page.getElement':
          pageGetElement(JSON.parse<PageGetElementParams>(params)!, callback)
          break
        case 'Page.getElements':
          pageGetElements(JSON.parse<PageGetElementParams>(params)!, callback)
          break
        case 'Page.getWindowProperties':
          getWindowProperties(JSON.parse<GetWindowPropertiesParams>(params)!, callback)
          break
      }
    } else if (method.startsWith('Element.')) {
      switch (method) {
        case 'Element.getElement':
          elementGetElement(JSON.parse<ElementGetElementParams>(params)!, callback)
          break
        case 'Element.getElements':
          elementGetElements(JSON.parse<ElementGetElementParams>(params)!, callback)
          break
        case 'Element.getDOMProperties':
          getDOMProperties(JSON.parse<GetDOMPropertiesParams>(params)!, callback)
          break
        case 'Element.getProperties':
          getProperties(JSON.parse<GetPropertiesParams>(params)!, callback)
          break
        case 'Element.callFunction':
          elementCallFunction(JSON.parse<ElementCallFunctionParams>(params)!, callback)
          break
        case 'Element.tap':
          tap(JSON.parse<TapParams>(params)!, callback)
          break
        case 'Element.callMethod':
          elementCallMethod(JSON.parse<ElementCallMethodParams>(params)!, callback)
          break
        case 'Element.getData':
          elementGetData(JSON.parse<ElementGetDataParams>(params)!, callback)
          break
        case 'Element.setData':
          elementSetData(JSON.parse<ElementSetDataParams>(params)!, callback)
          break
        case 'Element.getOffset':
          getOffset(JSON.parse<GetOffsetParams>(params)!, callback)
          break
        case 'Element.longpress':
          longpress(JSON.parse<LongpressParams>(params)!, callback)
          break
        case 'Element.touchstart':
        case 'Element.touchmove':
        case 'Element.touchend':
          const _params = JSON.parse<HandleTouchEventParams>(params)!
          _params.eventName = method.split('.')[1]
          handleTouchEvent(_params, callback)
          break
        case 'Element.getAttributes':
          getAttributes(JSON.parse<GetAttributesParams>(params)!, callback)
          break
        case 'Element.getStyles':
          getStyles(JSON.parse<GetStylesParams>(params)!, callback)
          break
      }
    }
  } catch (error) {
    res.set('error', { message: error.stackTraceToString() })
    send(res)
  }
}

export function initAutomator() {
  socketTask = uni.connectSocket({
    url: wsEndpoint
  });
  socketTask!.onMessage((res) => { onMessage(res.data as string) })
  socketTask!.onOpen((_) => {
    console.warn("automator.onOpen")
  })
  socketTask!.onError((err) => {
    console.warn(`automator.onError: ${JSON.stringify(err)}`);
  })
  socketTask!.onClose((_) => {
    console.warn("automator.onClose");
  })
}
