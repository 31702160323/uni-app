// @ts-ignore
import type { Callback } from '../../index.uts'
// @ts-ignore
import { JSONArray } from 'com.alibaba.fastjson'
// @ts-ignore
import { parsePage } from '../util.uts'
// @ts-ignore
import { send } from '../../index.uts'
// @ts-ignore
import { connectSocket, FirstSocketTaskEmitterParams, firstSocketTaskEmitter } from './Socket.uts'

// @ts-ignore
type MapFromJSONArrayObjectItem = io.dcloud.uts.gson.internal.LinkedTreeMap<string, any | null>

export const getPageStack = (callback: Callback): void => {
  callback({
    // @ts-ignore
    pageStack: getCurrentPages().map((page: BasePage): UTSJSONObject => {
      return parsePage(page)
    })
  }, null)
}
export type GetCurrentPageParams = {
  // @ts-ignore
  callback: (result: UTSJSONObject | null, error: any | null) => void
}
// @ts-ignore
function _getCurrentPage(): BasePage | null {
  // @ts-ignore
  const pages = getCurrentPages()
  return pages.length > 0 ? pages[pages.length - 1] : null
}

export const getCurrentPage = (params: GetCurrentPageParams): void => {
  const page = _getCurrentPage()
  const result = page != null ? parsePage(page) : null
  params.callback(result, null)
}

export type CallUniMethodParams = {
  method: string
  args: JSONArray
}


export const callUniMethod = (params: CallUniMethodParams, callback: Callback): void => {
  const method = params.method
  const args = params.args
  const success = (result: any) => {
    const timeout = method == 'pageScrollTo' ? 350 : 0
    setTimeout(() => {
      callback({ result }, null)
    }, timeout)
  }
  const onApiCallback = (data: any | null, _: any | null) => {
    const id = args[0] as string
    send({ id, result: { method, data } })
  }
  switch (method) {
    case 'navigateTo':
      // @ts-ignore
      uni.navigateTo({
        url: (args[0] as MapFromJSONArrayObjectItem).get('url') as string,
        animationType: (args[0] as MapFromJSONArrayObjectItem).get('animationType') != null ? (args[0] as MapFromJSONArrayObjectItem).get('animationType') as string : 'pop-in',
        animationDuration: (args[0] as MapFromJSONArrayObjectItem).get('animationDuration') != null ? (args[0] as MapFromJSONArrayObjectItem).get('animationDuration') as number : 300,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break

    case 'redirectTo':
      // @ts-ignore
      uni.redirectTo({
        url: (args[0] as MapFromJSONArrayObjectItem).get('url') as string,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break

    case 'reLaunch':
      // @ts-ignore
      uni.reLaunch({
        url: (args[0] as MapFromJSONArrayObjectItem).get('url') as string,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break

    case 'navigateBack':
      // @ts-ignore
      uni.navigateBack({
        animationType: (args[0] as MapFromJSONArrayObjectItem).get('animationType') != null ? (args[0] as MapFromJSONArrayObjectItem).get('animationType') as string : 'pop-out',
        animationDuration: (args[0] as MapFromJSONArrayObjectItem).get('animationDuration') != null ? (args[0] as MapFromJSONArrayObjectItem).get('animationDuration') as number : 300,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'switchTab':
      // @ts-ignore
      uni.switchTab({
        url: (args[0] as MapFromJSONArrayObjectItem).get('url') as string,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'getStorage':
      // @ts-ignore
      uni.getStorage({
        key: (args[0] as MapFromJSONArrayObjectItem).get('key') as string,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'setStorage':
      // @ts-ignore
      uni.setStorage({
        key: (args[0] as MapFromJSONArrayObjectItem).get('key') as string,
        data: (args[0] as MapFromJSONArrayObjectItem).get('data') as any,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'getStorageSync':
      // @ts-ignore
      callback({ result: uni.getStorageSync((args[0] as string)) }, null)
      break
    case 'setStorageSync':
      // @ts-ignore
      callback({ result: uni.setStorageSync(args[0] as string, args[1] as any) }, null)
      break
    case 'getStorageInfo':
      // @ts-ignore
      uni.getStorageInfo({
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'getStorageInfoSync':
      // @ts-ignore
      callback({ result: uni.getStorageInfoSync() }, null)
      break
    case 'removeStorage':
      // @ts-ignore
      uni.removeStorage({
        key: (args[0] as MapFromJSONArrayObjectItem).get('key') as string,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'removeStorageSync':
      // @ts-ignore
      callback({ result: uni.removeStorageSync(args[0] as string) }, null)
      break
    case 'clearStorage':
      // @ts-ignore
      uni.clearStorage({
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'clearStorageSync':
      // @ts-ignore
      callback({ result: uni.clearStorageSync() }, null)
      break
    case 'showToast':
      // @ts-ignore
      uni.showToast({
        title: (args[0] as MapFromJSONArrayObjectItem).get('title') as string,
        icon: (args[0] as MapFromJSONArrayObjectItem).get('icon') != null ? (args[0] as MapFromJSONArrayObjectItem).get('icon') as string : 'success',
        image: (args[0] as MapFromJSONArrayObjectItem).get('image') != null && (args[0] as MapFromJSONArrayObjectItem).get('image') != '' ? (args[0] as MapFromJSONArrayObjectItem).get('image') as string : null,
        mask: (args[0] as MapFromJSONArrayObjectItem).get('mask') != null ? (args[0] as MapFromJSONArrayObjectItem).get('mask') as boolean : false,
        duration: (args[0] as MapFromJSONArrayObjectItem).get('duration') != null ? (args[0] as MapFromJSONArrayObjectItem).get('duration') as number : 1500,
        position: (args[0] as MapFromJSONArrayObjectItem).get('position') != null ? (args[0] as MapFromJSONArrayObjectItem).get('position') as string : null,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'hideToast':
      // @ts-ignore
      uni.hideToast()
      break
    case 'showLoading':
      // @ts-ignore
      uni.showLoading({
        title: (args[0] as MapFromJSONArrayObjectItem).get('title') as string,
        mask: (args[0] as MapFromJSONArrayObjectItem).get('mask') != null ? (args[0] as MapFromJSONArrayObjectItem).get('mask') as boolean : false,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'hideLoading':
      // @ts-ignore
      uni.hideLoading()
      break
    case 'showModal':
      // @ts-ignore
      uni.showModal({
        title: (args[0] as MapFromJSONArrayObjectItem).get('title') != null ? (args[0] as MapFromJSONArrayObjectItem).get('title') as string : null,
        content: (args[0] as MapFromJSONArrayObjectItem).get('content') != null ? (args[0] as MapFromJSONArrayObjectItem).get('content') as string : null,
        showCancel: (args[0] as MapFromJSONArrayObjectItem).get('showCancel') != null ? (args[0] as MapFromJSONArrayObjectItem).get('showCancel') as boolean : true,
        cancelText: (args[0] as MapFromJSONArrayObjectItem).get('cancelText') != null ? (args[0] as MapFromJSONArrayObjectItem).get('cancelText') as string : null,
        cancelColor: (args[0] as MapFromJSONArrayObjectItem).get('cancelColor') != null ? (args[0] as MapFromJSONArrayObjectItem).get('cancelColor') as string : null,
        confirmText: (args[0] as MapFromJSONArrayObjectItem).get('confirmText') != null ? (args[0] as MapFromJSONArrayObjectItem).get('confirmText') as string : null,
        confirmColor: (args[0] as MapFromJSONArrayObjectItem).get('confirmColor') != null ? (args[0] as MapFromJSONArrayObjectItem).get('confirmColor') as string : null,
        editable: (args[0] as MapFromJSONArrayObjectItem).get('editable') != null ? (args[0] as MapFromJSONArrayObjectItem).get('editable') as boolean : false,
        placeholderText: (args[0] as MapFromJSONArrayObjectItem).get('placeholderText') != null ? (args[0] as MapFromJSONArrayObjectItem).get('placeholderText') as string : null,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'showActionSheet':
      // @ts-ignore
      uni.showActionSheet({
        title: (args[0] as MapFromJSONArrayObjectItem).get('title') != null ? (args[0] as MapFromJSONArrayObjectItem).get('title') as string : null,
        // @ts-ignore
        itemList: UTSArray.fromNative(((args[0] as MapFromJSONArrayObjectItem).get('itemList') as JSONArray)) as string[],
        itemColor: (args[0] as MapFromJSONArrayObjectItem).get('itemColor') != null ? (args[0] as MapFromJSONArrayObjectItem).get('itemColor') as string : null,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'connectSocket':
      const id = (args[0] as MapFromJSONArrayObjectItem).get('id') as string
      const url = (args[0] as MapFromJSONArrayObjectItem).get('url') as string
      connectSocket(id, url, callback)
      break
    case 'onSocketOpen':

      firstSocketTaskEmitter({ method: 'onOpen' } as FirstSocketTaskEmitterParams, onApiCallback)
      break
    case 'onSocketMessage':
      firstSocketTaskEmitter({ method: 'onMessage' } as FirstSocketTaskEmitterParams, onApiCallback)
      break
    case 'onSocketError':
      firstSocketTaskEmitter({ method: 'onError' } as FirstSocketTaskEmitterParams, onApiCallback)
      break
    case 'onSocketClose':
      firstSocketTaskEmitter({ method: 'onClose' } as FirstSocketTaskEmitterParams, onApiCallback)
      break
    case 'sendSocketMessage':
      firstSocketTaskEmitter({ method: 'send', data: (args[0] as MapFromJSONArrayObjectItem).get('data') } as FirstSocketTaskEmitterParams, callback)
      break
    case 'closeSocket':
      firstSocketTaskEmitter({ method: 'close', code: (args[0] as MapFromJSONArrayObjectItem).get('code') as number, reason: (args[0] as MapFromJSONArrayObjectItem).get('reason') as string } as FirstSocketTaskEmitterParams, callback)
      break
    case 'getSystemInfo':
      // @ts-ignore
      uni.getSystemInfo({
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'getSystemInfoSync':
      // @ts-ignore
      callback({ result: uni.getSystemInfoSync() }, null)
      break
    case 'getDeviceInfo':
      // @ts-ignore
      callback({ result: uni.getDeviceInfo() }, null)
      break
    case 'getSystemSetting':
      // @ts-ignore
      callback({ result: uni.getSystemSetting() }, null)
      break
    case 'getAppBaseInfo':
      // @ts-ignore
      callback({ result: uni.getAppBaseInfo() }, null)
      break
    case 'getAppAuthorizeSetting':
      // @ts-ignore
      callback({ result: uni.getAppAuthorizeSetting() }, null)
      break
    case 'openAppAuthorizeSetting':
      // @ts-ignore
      uni.openAppAuthorizeSetting({
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    case 'pageScrollTo':
      // @ts-ignore
      uni.pageScrollTo({
        scrollTop: (args[0] as MapFromJSONArrayObjectItem).get('scrollTop') as number,
        duration: (args[0] as MapFromJSONArrayObjectItem).get('duration') as number,
        success,
        fail(error) {
          error.errMsg = error.errMsg.replace(`${method}: fail `, '')
          callback(null, error)
        },
      })
      break
    default:
      callback(null, { errMsg: 'uni.' + method + ' not exists.' })
      break
  }
}

export type CaptureScreenshotParams = {
  id?: string | null,
  fullPage: boolean,
  path: string
}
export const captureScreenshot = (params: CaptureScreenshotParams, callback: Callback): void => {
  const currentPage = _getCurrentPage()
  if (currentPage != null) {
    currentPage.$viewToTempFilePath({
      id: params.fullPage ? null : params.id,
      wholeContent: params.fullPage,
      path: params.path,
      success: (res) => {
        // @ts-ignore
        const fileManager = uni.getFileSystemManager()
        fileManager.readFile({
          encoding: 'base64',
          filePath: res.tempFilePath,
          success(readFileRes) {
            callback({
              errMsg: 'screenshot:ok',
              tempFilePath: res.tempFilePath,
              data: readFileRes.data
            }, null)
          },
          fail(error) {
            callback(null, error)
          }
          // @ts-ignore
        } as ReadFileOptions)
      },
      fail: (error) => {
        callback(null, error)
      }
    })
  } else {
    callback(null, { errMsg: `currentPage is not found.` })
  }
}
