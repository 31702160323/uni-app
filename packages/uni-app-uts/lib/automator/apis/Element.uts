import type { Callback } from '../index.uts'
import { getElementById, getElementByNodeIdOrElementId, getComponentVmBySelector, getValidNodes, getComponentVmByNodeId, componentGetData, componentSetData, getElementByIdOrNodeId } from './util.uts'
import { JSONObject } from 'com.alibaba.fastjson'
import { getChildrenText, toCamelCase } from './util.uts'

export type GetElementParams = {
  pageId: string
  nodeId?: number | null
  elementId?: string | null
  selector: string
}

export const getElement = (params: GetElementParams, callback: Callback): void => {
  // TODO: support get component by class or id selector
  const element = getElementByNodeIdOrElementId(params.pageId, params.nodeId, params.elementId, callback)
  if (element != null) {
    let selector = params.selector
    if (selector.startsWith('uni-')) {
      selector = selector.replace('uni-', '')
      const component = getComponentVmBySelector(params.pageId, selector, callback)
      const result = {
        nodeId: component != null ? component.$.uid : null,
        tagName: component != null ? selector : null,
        elementId: component != null ? `${Date.now()}` : null
      }
      callback(result, null)
      return
    }
    const list: UTSJSONObject[] = []
    getValidNodes(element, selector, list)
    if (list.length > 0) {
      callback(list[0], null)
    } else {
      callback(null, { errMsg: `Element[${params.selector}] not exists` })
    }
  }
}

export const getElements = (params: GetElementParams, callback: Callback): void => {
  const element = getElementByNodeIdOrElementId(params.pageId, params.nodeId, params.elementId, callback)
  if (element != null) {
    const list: UTSJSONObject[] = []
    getValidNodes(element, params.selector, list, true)
    callback({ elements: list }, null)
  }
}

export type GetDOMPropertiesParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
  names: string[]
}

export const getDOMProperties = (params: GetDOMPropertiesParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    const properties = params.names.map((name: string): any | null => {
      if (name == 'innerText') {
        if (dom.tagName == 'TEXT') {
          return dom.getAttribute('value')
        } else {
          return getChildrenText(dom)
        }
      }
      if (name == 'value') {
        return dom.getAttribute('value')
      }
      if (name == 'offsetWidth') {
        return dom.offsetWidth
      }
      if (name == 'offsetHeight') {
        return dom.offsetHeight
      }
      return `Element.getDOMProperties not support ${name}`
    })
    callback({ properties }, null)
  }
}

export type GetPropertiesParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
  names: string[]
}

export const getProperties = (params: GetPropertiesParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  let component: ComponentPublicInstance | null = null
  if (params.nodeId != null) {
    component = getComponentVmByNodeId(params.pageId, params.nodeId!, callback)
  }
  if (dom != null) {
    const properties = params.names.map((name: string): any | null => {
      const attribute = dom.getAttribute(name) != null ? dom.getAttribute(name) : component != null ? component.$props[toCamelCase(name)] : null
      return attribute
    })
    callback({ properties }, null)
  }
}

export type GetAttributesParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
  names: string[]
}

export const getAttributes = (params: GetAttributesParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    const attributes = params.names.map((name: string): any | null => {
      if (name == 'class') {
        return (dom.ext["classList"] as string[]).join(' ')
      }
      return dom.getAttribute(name)
    })
    callback({ attributes }, null)
  }
}

export type CallFunctionParams = {
  pageId: string
  elementId: string
  functionName: string
  args: any[]
}

export const callFunction = (params: CallFunctionParams, callback: Callback): void => {
  const element = getElementById(params.pageId, params.elementId, callback)
  if (element != null) {
    switch (params.functionName) {
      case 'input.input':
        element.dispatchEvent("input", InputEvent("input", InputEventDetail(params.args[0] as string, 0, 0)))
        break
    }
    callback({ result: `Element.callFunction success` }, null)
  }
}

export type TapParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
}

export const tap = (params: TapParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    const x: number = 0
    const y: number = 0
    dom.dispatchEvent("click", MouseEvent("click", x.toFloat(), y.toFloat()))
    callback({ result: `Element.tap success` }, null)
  }
}

export type CallMethodParams = {
  pageId: string
  nodeId: number
  method: string
  args: any[]
}

export const callMethod = (params: CallMethodParams, callback: Callback): void => {
  const component = getComponentVmByNodeId(params.pageId, params.nodeId, callback)
  if (component != null) {
    const result = params.args.length > 0 ? component.$callMethod(params.method, params.args[0]) : component.$callMethod(params.method)
    callback({ result }, null)
  }
}

export type GetDataParams = {
  pageId: string
  nodeId: number
  path?: string | null
}
export const getData = (params: GetDataParams, callback: Callback): void => {
  const component = getComponentVmByNodeId(params.pageId, params.nodeId, callback)
  if (component != null) {
    const data = componentGetData(component, params.path != null ? params.path : '')
    callback({ data }, null)
  }
}

export type SetDataParams = {
  pageId: string
  nodeId: number
  data: Map<string, any | null>
}
export const setData = (params: SetDataParams, callback: Callback): void => {
  const component = getComponentVmByNodeId(params.pageId, params.nodeId, callback)
  if (component != null) {
    componentSetData(component, params.data)
    callback({ result: { errMsg: 'Page.setData: ok.' } }, null)
  }
}

export type GetOffsetParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
}

export const getOffset = (params: GetOffsetParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    callback({ left: dom.offsetLeft, top: dom.offsetTop }, null)
  }
}

export type LongpressParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
}

export const longpress = (params: LongpressParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    const x: number = 0
    const y: number = 0
    dom.dispatchEvent("longpress", MouseEvent("longpress", x.toFloat(), y.toFloat()))
    callback({ result: `Element.longpress success` }, null)
  }
}

export type HandleTouchEventParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
  eventName: string
  touches: any[],
  changedTouches: any[]
}

export const handleTouchEvent = (params: HandleTouchEventParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    const touches = getTouches(params.touches)
    const changedTouches = getTouches(params.changedTouches)
    dom.dispatchEvent(params.eventName, TouchEvent(null, params.eventName, touches, changedTouches))
    callback({ result: `Element.${params.eventName} success` }, null)
  }
}

type TypeTouch = {
  identifier: number,
  pageX: number,
  pageY: number
}

function getTouches(touches: any[]): Touch[] {
  return touches.map((touch): Touch => {
    const touchObj = JSON.parse<TypeTouch>(JSON.stringify(touch))!
    const result = Touch()
    result.identifier = touchObj.identifier.toFloat()
    result.pageX = touchObj.pageX.toFloat()
    result.pageY = touchObj.pageY.toFloat()
    return result
  })
}

export type GetStylesParams = {
  pageId: string
  elementId?: string | null
  nodeId?: number | null
  names: string[]
}

export const getStyles = (params: GetStylesParams, callback: Callback): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, callback)
  if (dom != null) {
    const styles = params.names.map((name: string): any | null => {
      return dom.style.getPropertyValue(name)
    })
    callback({ styles }, null)
  }
}
