import { getData, setData, getPageVm } from './util.uts'

export type GetDataParams = {
  pageId: number
  path: string
  callback: (res: any) => void
}
export const pageGetData = (params: GetDataParams): void => {
  const callback = params.callback
  const page = getPageVm(params.pageId)
  if (page === null) {
    callback({ result: { errMsg: 'Page.getData:fail, Page not found.' } })
    return
  }
  const data = getData(page, params.path)
  callback({ data })
}

export type SetDataParams = {
  pageId: number
  data: UTSJSONObject
  callback: (res?: any | null) => void
}
export const pageSetData = (params: SetDataParams): void => {
  const pageId = params.pageId
  const callback = params.callback
  const page = getPageVm(pageId)
  if (page !== null) {
    setData(page, params.data)
    callback({ result: { errMsg: 'setData: ok.' } })
  } else {
    callback({ result: { errMsg: `setData:fail, Page:${pageId} is not found.` } })
  }
}
export type CallMethodParams = {
  pageId: number
  method: string
  args: any[]
  callback: (res?: any | null) => void
}

export const callMethod = (params: CallMethodParams): void => {
  const page = getPageVm(params.pageId)
  if (page === null) {
    params.callback({ result: { errMsg: `Page[${params.pageId}] not exists` } })
  } else if (findVueMethod(page.$.type, params.method, page) === null) {
    params.callback({ result: { errMsg: `Page.${params.method} not exists` } })
  } else {
		const result = params.args.length > 0 ? page.$callMethod(params.method, params.args[0]) : page.$callMethod(params.method)
    params.callback({result: {result}})
  }
}
